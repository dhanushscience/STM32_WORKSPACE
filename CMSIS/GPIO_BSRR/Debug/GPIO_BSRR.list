
GPIO_BSRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000013b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000013b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b4  080003b4  000013b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000035a  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000120  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a92  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000734  00000000  00000000  0001a37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b178  00000000  00000000  0001aab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5c29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  000a5c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000a5cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000398 	.word	0x08000398

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000398 	.word	0x08000398

08000204 <delay>:
#define PIN0_OFFSET		(2*PIN0)
#define BSRR_OFFSET_VAL 16


void delay(unsigned int ms)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	ms *= 1200;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000212:	fb02 f303 	mul.w	r3, r2, r3
 8000216:	607b      	str	r3, [r7, #4]
	for(unsigned int x=0; x < ms; x++);
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e002      	b.n	8000224 <delay+0x20>
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	d3f8      	bcc.n	800021e <delay+0x1a>
}
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <main>:

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOBEN;
 8000240:	4b2c      	ldr	r3, [pc, #176]	@ (80002f4 <main+0xb8>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000244:	4a2b      	ldr	r2, [pc, #172]	@ (80002f4 <main+0xb8>)
 8000246:	f043 0302 	orr.w	r3, r3, #2
 800024a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOB->MODER |= (1U<<(PIN7_OFFSET));
 800024c:	4b2a      	ldr	r3, [pc, #168]	@ (80002f8 <main+0xbc>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a29      	ldr	r2, [pc, #164]	@ (80002f8 <main+0xbc>)
 8000252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000256:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<(PIN7_OFFSET + 1));
 8000258:	4b27      	ldr	r3, [pc, #156]	@ (80002f8 <main+0xbc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a26      	ldr	r2, [pc, #152]	@ (80002f8 <main+0xbc>)
 800025e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000262:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= (1U<<(PIN14_OFFSET));
 8000264:	4b24      	ldr	r3, [pc, #144]	@ (80002f8 <main+0xbc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a23      	ldr	r2, [pc, #140]	@ (80002f8 <main+0xbc>)
 800026a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800026e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<(PIN14_OFFSET + 1));
 8000270:	4b21      	ldr	r3, [pc, #132]	@ (80002f8 <main+0xbc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a20      	ldr	r2, [pc, #128]	@ (80002f8 <main+0xbc>)
 8000276:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800027a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= (1U<<(PIN0_OFFSET));
 800027c:	4b1e      	ldr	r3, [pc, #120]	@ (80002f8 <main+0xbc>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1d      	ldr	r2, [pc, #116]	@ (80002f8 <main+0xbc>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<(PIN0_OFFSET + 1));
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <main+0xbc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a1a      	ldr	r2, [pc, #104]	@ (80002f8 <main+0xbc>)
 800028e:	f023 0302 	bic.w	r3, r3, #2
 8000292:	6013      	str	r3, [r2, #0]

	while(1)
	{

		GPIOB->BSRR = RED_LED;
 8000294:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <main+0xbc>)
 8000296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800029a:	619a      	str	r2, [r3, #24]
		delay(1000);
 800029c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a0:	f7ff ffb0 	bl	8000204 <delay>

		GPIOB->BSRR = (1U<<(PIN7 + BSRR_OFFSET_VAL));
 80002a4:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <main+0xbc>)
 80002a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002aa:	619a      	str	r2, [r3, #24]
		delay(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b0:	f7ff ffa8 	bl	8000204 <delay>

		GPIOB->BSRR = BLUE_LED;
 80002b4:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <main+0xbc>)
 80002b6:	2280      	movs	r2, #128	@ 0x80
 80002b8:	619a      	str	r2, [r3, #24]
		delay(1000);
 80002ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002be:	f7ff ffa1 	bl	8000204 <delay>

		GPIOB->BSRR = (1U<<(PIN14 + BSRR_OFFSET_VAL));
 80002c2:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <main+0xbc>)
 80002c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c8:	619a      	str	r2, [r3, #24]
		delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ce:	f7ff ff99 	bl	8000204 <delay>

		GPIOB->BSRR = GREEN_LED;
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <main+0xbc>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	619a      	str	r2, [r3, #24]
		delay(1000);
 80002d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002dc:	f7ff ff92 	bl	8000204 <delay>

		GPIOB->BSRR = (1U<<(PIN0 + BSRR_OFFSET_VAL));
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <main+0xbc>)
 80002e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80002e6:	619a      	str	r2, [r3, #24]
		delay(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ec:	f7ff ff8a 	bl	8000204 <delay>
		GPIOB->BSRR = RED_LED;
 80002f0:	bf00      	nop
 80002f2:	e7cf      	b.n	8000294 <main+0x58>
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020400 	.word	0x40020400

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	@ (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	@ (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff85 	bl	800023c <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	@ (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	@ (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	@ (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	@ (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
